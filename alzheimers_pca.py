# -*- coding: utf-8 -*-
"""Alzheimers_PCA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PiL-sXUwtvo4gjeTa972iQREdySeHsY1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.metrics  import accuracy_score
from sklearn.model_selection import train_test_split
from google.colab import drive

drive.mount('/content/gdrive')
datapath="/content/gdrive/My Drive"

df_alzheimer = pd.read_csv(os.path.join(datapath,'Alzheimer_Data.csv'))
df_alzheimer = df_alzheimer.drop(["SubjectID"], axis=1)
df_alzheimer_x = df_alzheimer.drop(["Diagnosis (0 - HC, 1 - MCI, 2 - AD)"], axis = 1)
df_alzheimer_y = df_alzheimer["Diagnosis (0 - HC, 1 - MCI, 2 - AD)"]

scaler = StandardScaler().set_output(transform="pandas")
df_alzheimer_x = scaler.fit_transform(df_alzheimer_x)

from sklearn.preprocessing import StandardScaler
std_scaler = StandardScaler()
scaled_df = std_scaler.fit_transform(df_alzheimer_x)

from sklearn.decomposition import PCA
pca = PCA(n_components=2)
pca.fit_transform(scaled_df)
print(pca.components_)
print(sum(pca.explained_variance_ratio_))

print(pca.components_.shape)
labels = ['First PC', 'Second PC']
comp = pd.DataFrame(pca.components_, index = labels)
plt.figure(figsize=(100,4))
sns.heatmap(comp, annot=True, cmap="plasma")

weights_x = pca.components_[0]
weights_y = pca.components_[1]
#weights_z = pca.components_[2]
target = df_alzheimer_y.values.tolist()

data_np = df_alzheimer_x.to_numpy()

x = []
y = []
#z = []
for i in range(len(target)):
  l = data_np[i]
  x_coord = 0
  y_coord = 0
  #z_coord = 0
  for j in range(len(l)):
    x_coord += (l[j]*weights_x[j])
    y_coord += (l[j]*weights_y[j])
    #z_coord += (l[j]*weights_z[j])
  x.append(x_coord)
  y.append(y_coord)
  #z.append(z_coord)

'''plt.figure(figsize=(8,8))
ax = plt.axes(projection ="3d")
ax.scatter3D(x, y, z, c=target)
plt.title("3D scatter plot of 3 Principal Components")
ax.set_xlabel('First PC')
ax.set_ylabel('Second PC')
ax.set_zlabel('Third PC')
plt.show()'''

plt.figure(figsize=(8,8))
plt.scatter(x,y, c=target)
plt.title("2D scatter plot of 2 Principal Components")
plt.xlabel("First PC")
plt.ylabel("Second PC")

data = {'PC1': x,
        'PC2': y,
        'Target': target}

df = pd.DataFrame(data)
df

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import SGDClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from lightgbm import LGBMClassifier
from xgboost.sklearn import XGBClassifier
from sklearn.svm import LinearSVC




df_X = df.drop(["Target"], axis=1)
df_y = df["Target"]

scaler = StandardScaler().set_output(transform="pandas")
df_X = scaler.fit_transform(df_X)
acc = 0
for i in range(100):
  X_train, X_test, y_train, y_test = train_test_split(
      df_X, df_y, test_size=0.30
  )
  model = LogisticRegression()
  model.fit(X_train, y_train)
  pred=model.predict(X_test)
  acc += accuracy_score(y_test,pred)
print(acc)